// Code generated by config-gen; DO NOT EDIT.
package config

import (
	"context"
	"time"

	konfig "github.com/olefire/realtime-config-go"
	clientv3 "go.etcd.io/etcd/client/v3"
)

type AppConfig interface {
	// GetMaxRetries возвращает значение max_retries. Максимальное число попыток
	GetMaxRetries() int
	// GetEnableFeature возвращает значение enable_feature. feature flag
	GetEnableFeature() bool
	// GetBatchSize возвращает значение batch_size. Размер батча
	GetBatchSize() int
	// GetTimeout возвращает значение timeout. Таймаут ожидания ответа от сервиса
	GetTimeout() time.Duration
	// GetAuthRequiredMethods возвращает значение auth_required_methods. Auth required
	GetAuthRequiredMethods() map[string]struct{}
}

type appConfig struct {
	MaxRetries          int                 `etcd:"max_retries"`
	EnableFeature       bool                `etcd:"enable_feature"`
	BatchSize           int                 `etcd:"batch_size"`
	Timeout             time.Duration       `etcd:"timeout"`
	AuthRequiredMethods map[string]struct{} `etcd:"auth_required_methods"`
}

func NewAppConfig(ctx context.Context, cli *clientv3.Client, prefix string) (*konfig.RealTimeConfig, AppConfig, error) {
	cfg := &appConfig{
		MaxRetries:          5,
		EnableFeature:       true,
		BatchSize:           100,
		Timeout:             432000000000000 * time.Nanosecond,
		AuthRequiredMethods: map[string]struct{}{"/api/user/profile": struct{}{}, "/api/user/settings": struct{}{}, "/api/orders/create": struct{}{}},
	}
	rtc, err := konfig.NewRealTimeConfig(ctx, cli, prefix, cfg)
	return rtc, cfg, err
}

// GetMaxRetries возвращает значение max_retries. Максимальное число попыток
func (c *appConfig) GetMaxRetries() int {
	return c.MaxRetries
}

// GetEnableFeature возвращает значение enable_feature. feature flag
func (c *appConfig) GetEnableFeature() bool {
	return c.EnableFeature
}

// GetBatchSize возвращает значение batch_size. Размер батча
func (c *appConfig) GetBatchSize() int {
	return c.BatchSize
}

// GetTimeout возвращает значение timeout. Таймаут ожидания ответа от сервиса
func (c *appConfig) GetTimeout() time.Duration {
	return c.Timeout
}

// GetAuthRequiredMethods возвращает значение auth_required_methods. Auth required
func (c *appConfig) GetAuthRequiredMethods() map[string]struct{} {
	return c.AuthRequiredMethods
}
